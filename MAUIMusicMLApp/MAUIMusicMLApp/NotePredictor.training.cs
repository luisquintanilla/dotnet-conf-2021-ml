﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace MAUIMusicMLApp
{
    public partial class NotePredictor
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Chorale", @"Chorale"),new InputOutputColumnPair(@"Key", @"Key"),new InputOutputColumnPair(@"Measure", @"Measure"),new InputOutputColumnPair(@"60", @"60"),new InputOutputColumnPair(@"61", @"61"),new InputOutputColumnPair(@"62", @"62"),new InputOutputColumnPair(@"63", @"63"),new InputOutputColumnPair(@"64", @"64"),new InputOutputColumnPair(@"65", @"65"),new InputOutputColumnPair(@"66", @"66"),new InputOutputColumnPair(@"67", @"67"),new InputOutputColumnPair(@"68", @"68"),new InputOutputColumnPair(@"69", @"69"),new InputOutputColumnPair(@"70", @"70"),new InputOutputColumnPair(@"71", @"71"),new InputOutputColumnPair(@"72", @"72"),new InputOutputColumnPair(@"73", @"73"),new InputOutputColumnPair(@"74", @"74"),new InputOutputColumnPair(@"75", @"75"),new InputOutputColumnPair(@"76", @"76"),new InputOutputColumnPair(@"77", @"77"),new InputOutputColumnPair(@"78", @"78"),new InputOutputColumnPair(@"79", @"79")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Chorale",@"Key",@"Measure",@"60",@"61",@"62",@"63",@"64",@"65",@"66",@"67",@"68",@"69",@"70",@"71",@"72",@"73",@"74",@"75",@"76",@"77",@"78",@"79"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(@"Note", @"Note"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LightGbm(new LightGbmMulticlassTrainer.Options(){NumberOfLeaves=4594,MinimumExampleCountPerLeaf=4,NumberOfIterations=4,MaximumBinCountPerFeature=382,LearningRate=1.75851165788608E-09F,LabelColumnName=@"Note",FeatureColumnName=@"Features",Booster=new GradientBooster.Options(){SubsampleFraction=0.837172957593691F,FeatureFraction=0.60638047887935F,L1Regularization=354798.947292227F,L2Regularization=2E-10F}}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(@"PredictedLabel", @"PredictedLabel"));

            return pipeline;
        }
    }
}
